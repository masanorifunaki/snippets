{
	/*
		// Place your snippets for Shell Script here. Each snippet is defined under a snippet name and has a prefix, body and
		// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		// same ids are connected.
		// Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
	*/
	"printf ": {
		"prefix": "printf",
		"body": [
			"printf '%s\\n' \"${1}\"",
		],
		"description": "printfを使います。\n書式指定\n %s 文字列そのまま\n%5s 右詰めで5桁のスペースに文字列[  ABC]\n%-5s 左詰めで5桁のスペースに文字列[ABS  ]\n%-.2s 左詰めで頭から2文字のみ[AB]\n%5d 右詰めで5桁のスペースに整数[  123]\n %05d 右詰めで5桁のスペースにに整数(頭に0をつける)[00123]\n%-5d 左詰めで5桁のスペースに整数 [123  ]"
	},
	"init": {
		"prefix": "init",
		"body": [
			"#!/bin/bash",
			"# 実行コマンドを表示",
			"# set -v",
			"# 実行しようとしているコマンドが表示される。変数は展開される",
			"set -o xtrace",
			"readonly SCRIPT_NAME=\\${0##*\/}"
		],
		"description": "初期設定です。"
	},
	"case": {
		"prefix": "case",
		"body": [
			"case \"$${1}\" in",
			"\t${2}",
			"esac",
		],
		"description": "case分です。"
	},
	"printf_error": {
		"prefix": "printf_error",
		"body": [
			"printf '%s\\n' \"\\${SCRIPT_NAME}: '$${1}': \" 1>&2"
		],
		"description": "エラー文を出力するときに使う。"
	},
	"if [[ ]]; then": {
		"prefix": "if",
		"body": [
			"if [[ ${1} ]]; then",
			"\t${2}",
			"fi"
		],
		"description": "if文の定型文"
	},
	"if [[ $# -le 0 ]]; then": {
		"prefix": "if$#",
		"body": [
			"if [[ $# -le 0 ]]; then",
			"\tprintf '%s\\n' \"\\${SCRIPT_NAME}: ${2}\" 1>&2",
			"\t${3}",
			"fi"
		],
		"description": "引数が0のときにエラー文を出力する。"
	},
	"if [[ -z $ ]]; then": {
		"prefix": "if-z",
		"body": [
			"if [[ -z $${1} ]]; then",
			"\tprintf '%s\\n' \"\\${SCRIPT_NAME}: ${2}\" 1>&2",
			"\t${3}",
			"fi"
		],
		"description": "引数が空のときにエラー文を出力する。"
	},
	"return": {
		"prefix": "return",
		"body": [
			"return ${1}",
		],
		"description": "関数を終了させるときに使う。"
	},
	"exit": {
		"prefix": "exit",
		"body": [
			"exit ${1}",
		],
		"description": "シェルスクリプトを終了させるときに使う。"
	},
	"if [[ ! -f $ ]]; then": {
		"prefix": "if-",
		"body": [
			"if [[ ! -${1} $${2} ]]; then",
			"\tprintf '%s\\n' \"\\${SCRIPT_NAME}: '$${3}':\" 1>&2",
			"\t${4}",
			"fi"
		],
		"description": "引数がファイルorディレクトリではないときにエラー文を出力する。"
	},
	"if [[ $? -ne 0 ]]; then": {
		"prefix": "if$?",
		"body": [
			"if [[ $? -ne 0 ]]; then",
			"\t${1}",
			"\t${2}",
			"fi"
		],
		"description": "直前のコマンド終了ステータスが1以上のときに使う"
	},
	"${BASH_REMATCH[]}": {
		"prefix": "BASHRE",
		"body": [
			"\\${BASH_REMATCH[${1}]}",
		],
		"description": "${BASH_REMATCH[]}"
	},
	"cat << END": {
		"prefix": "cat<<END",
		"body": [
			"cat << END",
			"${1}",
			"END"
		],
		"description": "ヒアドキュメント"
	},
	"cat <<-END": {
		"prefix": "cat<<-END",
		"body": [
			"cat <<-END",
			"${1}",
			"END"
		],
		"description": "ヒアドキュメント。行頭のタブを無視する"
	},
	"readonly VERSION=": {
		"prefix": "readonly VERSION=",
		"body": [
			"readonly VERSION=${1}",
		],
		"description": "ヒアドキュメント"
	},
	"print_version()": {
		"prefix": "print_version()",
		"body": [
			"print_version()",
			"{",
			"\tcat << END",
			"\\$SCRIPT_NAME version \\$VERSION",
			"END",
			"}"
		],
		"description": "print_version()関数"
	},
	"print_error()": {
		"prefix": "print_error()",
		"body": [
			"print_error()",
			"{",
			"\tcat << END 1>&2",
			"\\$SCRIPT_NAME: \\$${1}",
			"END",
			"}"
		],
		"description": "print_error()関数"
	},
	"for": {
		"prefix": "for",
		"body": [
			"for i in \"\\$@\"",
			"do",
			"\t${1}",
			"done",
		],
		"description": "forループ"
	},
	"getopts": {
		"prefix": "getoptswhile",
		"body": [
			"while getopts \"$1\" option",
			"do",
			"\tcase \"\\$option\" in",
			"\t\t$2)",
			"\t\t\t$3",
			"\t\t\t;;",
			"\t\t\\?)",
			"\t\t\t",
			"\t\t\t;;",
			"\tesac",
			"done",
			"shift \\$((OPTIND - 1))",
			"path=\"\\$1\""
		],
		"description": "getoptswhile文"
	},
	"$OPTARG": {
		"prefix": "OPTARG",
		"body": [
			"OPTARG",
		],
		"description": "getops:で受け取った引数はシェル変数$OPTARGへ代入される"
	},
	"$OPTIND": {
		"prefix": "OPTIND",
		"body": [
			"OPTIND",
		],
		"description": "getops次に解析する位置パラメータの番号がシェル変数$OPTINDへ代入される"
	},
	"while": {
		"prefix": "while",
		"body": [
			"while $1",
			"do",
			"\t$2",
			"done"
		],
		"description": "while文"
	},
	"tty": {
		"prefix": "tty",
		"body": [
			"tty"
		],
		"description": "仮想端末のデバイス名を確認する"
	},
	"echo": {
		"prefix": "echo",
		"body": [
			"echo $1"
		],
		"description": "echo コマンド"
	},
	"echo -e": {
		"prefix": "echo-e",
		"body": [
			"echo -e \"\\\\\\033[$1;$2m $3 \\\\\\033[0m\""
		],
		"description": "背景と文字色を変えるechoコマンド\n パラメータを複数指定する場合は「;」で区切って書く。"
	},
	"30": {
		"prefix": "b30",
		"body": [
			"30"
		],
		"description": "Foreground Color(文字色) 黒"
	},
	"31": {
		"prefix": "r31",
		"body": [
			"31"
		],
		"description": "Foreground Color(文字色) 赤"
	},
	"32": {
		"prefix": "g32",
		"body": [
			"32"
		],
		"description": "Foreground Color(文字色) 緑"
	},
	"33": {
		"prefix": "y33",
		"body": [
			"33"
		],
		"description": "Foreground Color(文字色) 黄"
	},
	"34": {
		"prefix": "b34",
		"body": [
			"34"
		],
		"description": "Foreground Color(文字色) 青"
	},
	"35": {
		"prefix": "p35",
		"body": [
			"35"
		],
		"description": "Foreground Color(文字色) 紫"
	},
	"36": {
		"prefix": "lb36",
		"body": [
			"36"
		],
		"description": "Foreground Color(文字色) 水"
	},
	"37": {
		"prefix": "w37",
		"body": [
			"37"
		],
		"description": "Foreground Color(文字色) 白"
	},
	"40": {
		"prefix": "b40",
		"body": [
			"40"
		],
		"description": "Background Color(背景色) 黒"
	},
	"41": {
		"prefix": "r41",
		"body": [
			"41"
		],
		"description": "Background Color(背景色) 赤"
	},
	"42": {
		"prefix": "g42",
		"body": [
			"42"
		],
		"description": "Background Color(背景色) 緑"
	},
	"43": {
		"prefix": "y43",
		"body": [
			"43"
		],
		"description": "Background Color(背景色) 黄"
	},
	"44": {
		"prefix": "b44",
		"body": [
			"44"
		],
		"description": "Background Color(背景色) 青"
	},
	"45": {
		"prefix": "p45",
		"body": [
			"45"
		],
		"description": "Background Color(背景色) 紫"
	},
	"46": {
		"prefix": "lb46",
		"body": [
			"46"
		],
		"description": "Foreground Color(文字色) 水"
	},
	"47": {
		"prefix": "w47",
		"body": [
			"47"
		],
		"description": "Background Color(背景色) 白"
	},
	"awk": {
		"prefix": "awk",
		"body": [
			"awk $1 '{print $2}' $3"
		],
		"description": "awk -F 区切り文字 '{アクション}' ファイル名 \nテキストファイルを1行ずつ読み、区切り文字に合致した行に対して、アクションで指定された内容を実行します。\n組み込み変数NF 現在処理している行のカラム数"
	},
	"tar": {
		"prefix": "tar",
		"body": [
			"tar $1"
		],
		"description": "フルスペル：Tape ARchiver\n読み方：ター\n主に、複数のファイルで構成されるソフトウェアを転送・配布する際などに用いられる。アーカイブされたtar形式のファイルには「.tar」という拡張子が付く。ただし、tarは圧縮機能をもっていないので、圧縮のためにgzipを併用する方法が一般的となっている（gzipにはアーカイブ機能がない）。その場合、拡張子「.tar.gz」となる。\nv:　現在処理中のファイルを表示\nc: アーカイブの作成(create)\nf: アーカイブをファイルとして作成\n tar cvf archive.tar *.\n rオプション 存在するtarアーカイブファイルの最後に指定したディレクトリorファイルを追加する。\n tf ~.tar 既存ファイルの確認"
	},
	"pv": {
		"prefix": "pv",
		"body": [
			"pv $1"
		],
		"description": "フルスペル：Pipe Viewer\nパイプ処理中のデータの流れを可視化するコマンド。データの流れを可視化するcatコマンド。\n 例 ar cf - * | pv | gzip > archive.tar.gz\n(パイプ処理したデータサイズ)MiB (処理時間)0:00:00 [(平均速度)MiB/s] [<=>  (プログレスバー)]"
	},
	"tarコマンドオプション": {
		"prefix": "tar-option",
		"body": [
			"# tarコマンド全般で使う共通オプション",
			"# オプション -f（オプション --file=ARCHIVE）",
			"# アーカイブファイル名を指定する",
			"# オプション -v（オプション --verbose）",
			"# アーカイブ結果を表示する",
			"# オプション -w（オプション --interactive, オプション  --confirmation）",
			"# 操作を行うかの確認メッセージを表示する。",
			"# オプション --show-defaults",
			"# tar の既定値を表示",
			"# ===========================",
			"# アーカイブするオプション",
			"# オプション -c（オプション --create）\n# アーカイブを新規に作成",
			"# オプション -r（オプション --append）\n# アーカイブに新たなファイルを追加",
			"# オプション -u（オプション  --update）\n# 新しいファイルのみがアーカイブされる",
			"# オプション -A（オプション  --catenate, オプション --concatenate）\n# tarアーカイブされたファイルの内容を追加する",
			"# オプション --delete \n# アーカイブファイル内からファイルを削除する",
			"# オプション suffix=STRING \n# バックアップのアーカイブファイルの作成",
			"# オプション --remove-files \n# アーカイブに追加した元ファイルを削除する",
			"# オプション -V（オプション --label=TEXT）\n# アーカイブにボリューム名を設定する",
			"# オプション -C（オプション --directory=DIR）\n# アーカイブ元のファイルのディレクトリを指定する",
			"# オプション --totals \n# アーカイブ後に書きだしたバイト数を表示",
			"# オプション--utc \n# ファイルの更新時刻を表示",
			"# オプション -W（オプション --verify）\n# アーカイブを書き出した後に検証",
			"# ===========================",
			"# 解凍するオプション",
			"# オプション -x（オプション --extract, オプション --get）\n# アーカイブされたファイルを解凍し展開・復元を行う",
			"# オプション -k（オプション --keep-old-files）\n# 解凍した際に既存のファイルを置き換えない",
			"# オプション --keep-newer-files \n# 解凍した際に変更日時の新しいファイルを置き換えない",
			"# オプション --overwrite \n# 解凍する場合に既存のファイルを置き換える",
			"# オプション -U（オプション --unlink-first) \n# 解凍する時に該当のファイルを削除する",
			"# オプション --recursive-unlink \n# 解凍する時に該当のディレクトリを削除にする",
			"# オプション --to-command=COMMAND \n# アーカイブから取り出したファイルをプログラムで開く",
			"# オプション -m（オプション--touch）\n# アーカイブのファイルの更新時刻を現在時刻とする",
			"# オプション--delay-directory-restore \n# すべての解凍が終了するまでファイルの属性を変えない",
			"# オプション -O（オプション --to-stdout）\n# アーカイブから取り出したファイルを標準出力に表示",
			"# ===========================",
			"# 圧縮するアーカイブに関するオプション",
			"# オプション -j（オプション --bzip2）\n# bzip2形式で圧縮する。",
			"# オプション-z（オプション --gzip）\n# gzip形式で圧縮する。",
			"# オプション--gunzip \n# gzip形式で圧縮されたアーカイブを解凍する",
			"# ===========================",
			"# その他オプション",
			"# オプション -t（オプション --list)\n# アーカイブの内容を一覧表示",
			"# オプション -M（オプション --multi-volume）\n# アーカイブを分割する",
			"# オプション -d（オプション  --diff, オプション --compare）\n# アーカイブ元とアーカイブファイルの違いをチェックする",
			"# オプション --test-label \n# アーカイブのボリューム情報を表示する"
		],
		"description": "tarコマンドのオプション"
	},
	"${変数名:-値}": {
		"prefix": "k:-",
		"body": [
			"${$1:-$2}"
		],
		"description": "変数の値がセットされているかどうかだけをチェックして、値は上書きしたくない場合は:-を使う。"
	},
	"${変数名:?}": {
		"prefix": "k:?",
		"body": [
			"${$1:?$2}"
		],
		"description": "変数の値を返す。ただし、変数が未定義or空文字列のときは、?以降の文字列を出力してスクリプトが出力します。\n例\n #シェル変数MYDIRをチェック。未定義もしくは空ならエラー終了\n: ${MYDIR:? シェル変数MYDIRがセットされていません}"
	},
	"${変数名:=値}": {
		"prefix": "k:=",
		"body": [
			"${$1:=$2}"
		],
		"description": ":=が変数の値がセットされているかをチェックして、値を代入する。${変数名:=値}は、変数が設定されていないもしくは空のときは、指定した値を代入する。"
	},
	"${変数名:+値}": {
		"prefix": "k:+",
		"body": [
			"${$1:+$2}"
		],
		"description": "変数が未定義もしくは空文字列のときは、nullを返す。以下のように使う。\n # 変数MYDIRをチェック。空文字列ではない値ならフラグflgに1をセット\nflg=${MYDIR:+1}"
	},
	"localコマンド": {
		"prefix": "local",
		"body": [
			"local $1"
		],
		"description": "関数内でローカル変数を宣言するときに使う。"
	},
	"expr 変数名 : パターン": {
		"prefix": "expr$",
		"body": [
			"expr \"\\$$1\" : \"\\($2\\)\""
		],
		"description": "正規表現を利用して変数内の文字列からマッチする部分を取り出すことができます。\nstring='This is a pen.'\nexpr 'This is a pen.' : 'This is a \\(.*\\).'\n出力 > pen"
	},
	"/dev/null": {
		"prefix": "devnull",
		"body": [
			"/dev/null"
		],
		"description": "/dev/nullから読み込んでも何もデータは返されない\n/dev/nullにデータを書き込んでもどこにも書き込まれることはなくデータは消える\n不要な出力は/dev/nullにするようにする。"
	},
	"str_ex": {
		"prefix": "str_ex",
		"body": [
			"# 文字列に関する評価演算子",
			"# str1 = str2\n# str1とstr2が等しい(==と同じ)",
			"# str1 == str2\n# str1とstr2が等しい(=と同じ)",
			"# str1 != str2\n# str1とstr2が等しくない",
			"# -n str1 \n# str1が空文字列ではない",
			"# -z str1 \n# str1が空文字列である",
			"# str1 < str2 \n# str1がstr2よりも辞書順で前にある",
			"# str1 > str2 \n# str1がstr2よりも辞書順で後にある",
		],
		"description": "文字列に関する評価演算子"
	},
	"int_ex": {
		"prefix": "int_ex",
		"body": [
			"# 整数に関する評価演算子",
			"# int1 -eq int2\n# int1とint2が等しい",
			"# int1 -ne int2\n# int1とint2が等しくない",
			"# int1 -lt int2\n# int1がint2より小さい",
			"# int1 -le int2\n# int1がint2以下",
			"# int1 -gt int2\n# int1がint2より大きい",
			"# int1 -ge int2\n# int1がint2以上",
		],
		"description": "整数に関する評価演算子\n eqはequal,ltはless than"
	},
	"file_ex": {
		"prefix": "file_ex",
		"body": [
			"# ファイル属性に関する評価演算子",
			"# -a file\n# fileが存在する(-eと同じ)",
			"# -d file\n# fileが存在し、ディレクトリである",
			"# -e file\n# fileが存在する(-aと同じ)",
			"# -f file\n# fileが存在し、通常のファイルである",
		],
		"description": "ファイル属性に関する評価演算子"
	},
	"echo option": {
		"prefix": "echo-option",
		"body": [
			"# echo コマンドのオプション",
			"# echo -n 改行を追加しない",
			"# echo -e エスケープ文字を有効にする",
			"# ==============================",
			"# echo コマンドで使用できるエスケープ文字",
			"# ==============================",
			"# \\a ベル",
			"# \\b バックスペース",
			"# \\c これ以降の出力を抑止する",
			"# \\e エスケープ記号",
			"# \\f フォームフィード",
			"# \\n 改行(LF)",
			"# \\r キャリッジリターン(CR)",
			"# \\t タブ",
			"# \\v 垂直タブ",
			"# \\　\\そのもの",
			"# \\0nnn nnnで表したASCⅡコードの文字。nnnは最大3桁の8進数の値",
			"# \\xHH HHで表したASCⅡコードの文字。HHは最大2桁の16進数の値",
			"# --------------------------------",
			"# echo -E エスケープ文字を無効にする"
		],
		"description": "echo コマンドのオプション"
	},
	"printf option": {
		"prefix": "printf-option",
		"body": [
			"# ==============================",
			"# printfコマンドの形式",
			"# ==============================",
			"# printf 書式文字列 引数1 引数2...",
			"# ==============================",
			"# printfで使用できる代表的な書式指定文字",
			"# ------------------------------",
			"# %s 文字列",
			"# %d 整数値",
			"# %x 16新数値。ただしaからfまでの小文字表記",
			"# %X 16新数値。ただしAからFまでの小文字表記",
			"# %% %そのもの",
			"# ------------------------------",
			"# 引数で指定した文字列を標準出力に出力する。",
			"# printf '%s\\n' \"\\$1\"",
			"# ------------------------------",
			"# printfコマンドで変数に文字列を代入する",
			"# print -f msg 'value = %04x' \"255\"",
			"# value = 00ff が msg へ代入される。",
			"# ------------------------------",
		],
		"description": "printf コマンドのオプション"
	},
	"printf color": {
		"prefix": "printf-e",
		"body": [
			"printf '\\e[$1m%s\\n\\e[m' \"$2\"",
		],
		"description": "printfコマンドを使って色を変える時に使う。\n\\e[ ... シーケンスエレメント\n m ... シーケンス終了を表すエンド・コード"
	},
	"sed-np": {
		"prefix": "sed-np",
		"body": [
			"sed -n 's/\\($1\\)/\\1/p' $2",
		],
		"description": "後方参照\n-nオプションは、処理後のパターンスペースの内容を出力しないようにするオプション\npフラグ、マッチした場合のみパターンスペースを出力する。\n -npを組み合わせることで、置き換えが発生した行だけ出力する。"
	},
	"sed": {
		"prefix": "sed",
		"body": [
			"sed 's/$1/$2/g' $3",
		],
		"description": "sed [オプション] スクリプト 入力ファイル \n ストリームエディタと呼ばれるコマンドの1種で、入力ストリームに対してテキスト変換などの処理を行って結果を出力するためのコマンド"
	},
	"sed-e": {
		"prefix": "sed-e",
		"body": [
			"sed -e 's/$1/$2/g' -e 's/$3/$4/g' $5",
		],
		"description": "-e スクリプト\n スクリプトを指定する。複数のスクリプトを指定したいときに使う。"
	},
	"sed-i": {
		"prefix": "sed-i",
		"body": [
			"sed -i '$1' 's/$2/$3/g' $4",
		],
		"description": "-i\n ファイルを編集して上書き保存する。\nBSD sed(Mac)での上書き保存には、バックアップ用拡張子の指定が必須。拡張子を「空文字」に指定する場合、バックアップされない。"
	},
	"sed-d": {
		"prefix": "sed-d",
		"body": [
			"sed '/$1/d' $2",
		],
		"description": "パターンにマッチする行を削除する。"
	},
	"wc-l": {
		"prefix": "wc-l",
		"body": [
			"wc -l $1",
		],
		"description": "-l\n ファイルの行数が表示される"
	},
	"${}": {
		"prefix": "b$",
		"body": [
			"${$1}",
		],
		"description": "変数名の後ろに文字列を連結する際に、変数名の区切りを明示したいときに使う"
	},
	"sed-u": {
		"prefix": "sed-u",
		"body": [
			"sed -u",
		],
		"description": "未定義の変数を利用した場合は、エラーとして終了させたいときに使う。"
	},
	"cat'End'": {
		"prefix": "cat<<'END'",
		"body": [
			"cat << 'END'",
			"${1}",
			"END"
		],
		"description": "変数展開やコマンド置換えさせたくない時に使う。"
	},
	"ヒアストリング": {
		"prefix": "cat<<<",
		"body": [
			"cat <<< \"$1",
			"$2",
			"\"",
		],
		"description": "bash用\n埋め込みテキストをシェルスクリプトに記述するときに使う。文字列を\"でくくるだけで良い"
	},
	"ヒアストリング''": {
		"prefix": "cat<<<'",
		"body": [
			"cat <<< '$1",
			"$2",
			"'",
		],
		"description": "変数展開やコマンド置換えさせたくない時に使う。"
	},
	"dirname": {
		"prefix": "dirname",
		"body": [
			"dirname \"\\$0\"",
		],
		"description": "ディレクトリ部分を取り出すコマンド\n${0%/*}と同じ"
	},
	"basename": {
		"prefix": "basename",
		"body": [
			"basename \"\\$0\"",
		],
		"description": "ファイルの部分を取り出すコマンド\n${0##/*}と同じ"
	},
	"basename.": {
		"prefix": "basename.",
		"body": [
			"basename \"$1\" $2",
		],
		"description": "ファイルの拡張子を取り除きたい時に使う"
	},
	"-maxdepth": {
		"prefix": "-maxdepth",
		"body": [
			"-maxdepth $1",
		],
		"description": "findコマンドのオプション。-mathdepthでオプションを指定することで、サブディレクトリを対象としないようにする。\n-maxdepth 1 1階層(指定ディレクトリの直下)を対象"
	},
	":>": {
		"prefix": "initfile:>",
		"body": [
			": > ",
		],
		"description": "空ファイル作成の時につかう"
	},
	"uptime": {
		"prefix": "uptime",
		"body": [
			"uptime $1",
		],
		"description": "uptimeはサーバの稼働時間を調べるコマンド\n現在の時間:稼働時間:接続しているユーザー:システムにかかっている負荷（平均）:1m,5m,15m"
	},
	"sleep": {
		"prefix": "sleep",
		"body": [
			"sleep",
		],
		"description": "sleepコマンドは、指定した時間だけ処理を遅延（シェルを停止）するコマンド\nオプションs秒 m分 h時間 d日数 sleep 10s 10秒遅延"
	},
	"stat": {
		"prefix": "stat-x",
		"body": [
			"stat -x",
		],
		"description": "ファイルなどのタイムスタンプを確認する\n atime Access 最終アクセス時刻\n mtime Modify 最終修正時刻 \nctime Change 最終状態変更時刻"
	},
	"touch": {
		"prefix": "touch",
		"body": [
			"touch $1",
		],
		"description": "空ファイルを作成する\n\t -tオプション atime mtimeを更新する\n\t -cオプション ファイルがない場合は新しく更新しない"
	},
	"-mtime": {
		"prefix": "-mtime",
		"body": [
			"-mtime $1",
		],
		"description": "findコマンドのオプション。ファイルが持つタイムスタンプを利用して、ファイルを検索するときに使う\n-mtime -n nより未来 4日前から未来\n-mtime +n nより過去 2日前から過去\n-mtime n+1 n+1前から、n日前まで"
	},
	"-print0xargs-0": {
		"prefix": "-print0xargs-0",
		"body": [
			"-print0 | xargs -0 $1",
		],
		"description": "findコマンドのオプション。フ文字列の区切りに空白ではなく、ヌル文字が使われているとみなすオプション。\nxargs -0 とともにつかうのが定番。 "
	},
	"xargs": {
		"prefix": "xargs",
		"body": [
			"xargs $1",
		],
		"description": "xargsコマンド主な使い方は、findコマンドで特定の条件にマッチするファイルリストを出力し、それをパイプでxargsコマンドが受け取って処理する。"
	},
	"ARG_MAX": {
		"prefix": "ARG_MAX",
		"body": [
			"ARG_MAX",
		],
		"description": "UNIXでは、コマンドライン引数の上限値はARG_MAX定数で決め打ちされている。"
	},
	"grep": {
		"prefix": "grep",
		"body": [
			"grep $1 $2",
		],
		"description": "grepコマンドは、入力ファイルの内容のうち指定した検索パターンにマッチする行だけを標準出力に出力する。\n入力ファイルの省略、「-」を指定した場合、標準入力から読み込まれる。\n検索パターンの指定に関するオプション\n-E 拡張正規表現を使用する。\n-F 正規表現を使用しない。\n-i 大文字と小文字を区別しない。\n -e 検索パターン（複数指定するときなどに使う) \n-v 検索結果を反転させる。\n出力書式に関するオプション\n-n 行番号を出力に含める。\n -H マッチしたファイルのファイル名を出力に含める \n-hマッチしたファイルのファイル名だけを出力に含めない。\n -l マッチしたファイルのファイル名だけを出力する。\n-L マッチしていないファイルのファイル名だけを出力する。\n-o 行全体ではなく検索パターンにマッチした箇所だけを出力する。 \n -q マッチした結果を出力しない。\n-c 行数をカウントする"
	},
	"date": {
		"prefix": "date",
		"body": [
			"date '+$1'",
		],
		"description": "dateコマンドは引数+で始まる場合、現在の時刻（日付）を指示して表示できる。引数としてフィールド名を与えることで、年月日や時分秒を自由に組み合わせて文字列を作れる。\n%Y 年(1970~) \n%y 年の下2桁(00~99)\n%m 月(01~12) \n%d日(01~31)\n%H時(00~23)\n%M 分(00~59)\n %S 秒(00~59)\n-v+?d未来の時間を指定したいときに使う\n-v-?m過去の時間を指定したいときに使う。"
	},
	"cp": {
		"prefix": "cp-v",
		"body": [
			"cp -v \"$1\" \"$2\" ",
		],
		"description": "コピーしたファイルをログで表示する。",
	},
	"rsync": {
		"prefix": "rsync",
		"body": [
			"rsync -av \"$1\" \"$2\" ",
		],
		"description": "オプション\n -a アーカイブモード　ファイル属性をそのまままコピーする\n-v verboseモード　実際にコピーを行ったファイルリストや転送量を表示する\n -n dry-runモード 実際のファイルコピーは行なわず、処理される対象のファイルリストのみ出力される\n--delete 完全にディレクトリを同期させる時に使う。\nコピー元のディレクトリの最後が、スラッシュで終わる場合、「ディレクトリ自身はコピーせず、そのディレクトリの中のファイル、サブディレクトリ全て」を意味する\nrsync [オプション] <コピー元> <コピー先>",
	},
	"zip": {
		"prefix": "zip",
		"body": [
			"zip -r \"$1\" \"$2\" ",
		],
		"description": "zipファイルを作成する時に使う。\n zip [オプション] <zipファイル> <対象ファイル>\n-r オプション ディレクトリ内を再帰的に処理する。指定パスにサブディレクトリがある場合にはその中身を対象とする。\n-e (Encrypt)パスワード付きのzipファイル作成する時に使う ",
	},
	"gzip": {
		"prefix": "gzip",
		"body": [
			"gzip -$1 $2",
		],
		"description": "gzipコマンドで圧縮率を大きくしたい\n圧縮率は1~9まで指定できる。デフォルトは6\n",
	},
	"--exclude": {
		"prefix": "--exclude",
		"body": [
			"--exclude $1",
		],
		"description": "gzipコマンドのオプション。除外させたい、ディレクトリがある時に使う。\n--exclude ディレクトリ名\n --exclude パス\n -X --exclude リスト 除外したいファイルがたくさんある場合には、-Xオプションにより外部ファイルに記述した除外リストを適用できる。",
	},
	"cp-a": {
		"prefix": "cp-a",
		"body": [
			"cp -a $1",
		],
		"description": "-aオプション\nファイル属性を保持したままコピーできる。\nバックアップ用途で使う。-R(recursive)も同時に指定されたとみなされ、サブディレクトリを含めてファイルツリーをそのままコピーする。",
	},
	"sort": {
		"prefix": "sort",
		"body": [
			"sort $1",
		],
		"description": "-r 逆順ソート\n-n 数値ソート",
	},
	"IFS_BACKUP": {
		"prefix": "IFS_BACKUP",
		"body": [
			"IFS_BACKUP=\\$IFS",
		],
		"description": "IFSを一時的に変更したいときに使う",
	},
	"IFS_改行": {
		"prefix": "IFS_n",
		"body": [
			"IFS=\\$'\\n'",
		],
		"description": "IFSを改行のみにしたいときに使う。",
	},
	"netstat": {
		"prefix": "netstat",
		"body": [
			"netstat",
		],
		"description": "FreeBSDやMacでデフォルトゲートウェイを調べる時に使う。\n-r 現在の経路テーブルを表示。\n-n ホスト名で表示せずにIPアドレスで表示させる",
	},
	"host": {
		"prefix": "host",
		"body": [
			"host $1",
		],
		"description": "DNSサーバに問い合わせて名前解決を行う。\n名前解決：ネットワーク上でホスト名からIPアドレスを取得すること。",
	},
	"nc": {
		"prefix": "nc",
		"body": [
			"nc $1",
		],
		"description": "nc [オプション] <対象ホスト> <ポート番号>\nオプション\n-k コマンドを終了させず、Ctrl + C が入力されるまで永続化する\n-l リッスンモードで起動する\n-n ポート番号のサービス名への変換や、ホスト名の名前解解決を行わない。\n-u TCPパケットではなくUDPパケットを送信する。\n-v verboseモード。通人状態の出力を細かく行う。\n -W タイムアウト秒数を設定する。 \n -z データ通信は行わずハンドシェイクのみ行う",
	},
	"dd": {
		"prefix": "dd",
		"body": [
			"dd $1",
		],
		"description": "ddコマンドはファイルをブロック単位で読み出し、指定通り変換して出力する\nif=ファイル 標準入力の代わりにファイルから読み出す。デバイスファイルも指定可能\nof=ファイル 標準出力の代わりにファイルへ書き込む。デバイスファイルも指定可能\nbs=バイト数 1回に読み書きするブロックサイズ（バイト数）\ncount=個数 ibsで指定したサイズのブロックを入力から個数分だけコピーする\n「dd bs=バイト数 count=個数 if=/dev/zero of=ファイル」で、「バイト数×個数」分のサイズのファイルを作成dd bs=100 count=1 if=/dev/zero of=file1（100バイトのファイルを生成する） ",
	},
	"rev": {
		"prefix": "rev",
		"body": [
			"rev $1",
		],
		"description": "各行の文字列を逆転(reverse）して表示したいときに使う",
	},
	"cut": {
		"prefix": "cut",
		"body": [
			"cut $1",
		],
		"description": "テキストファイルから一部分を切り出すコマンド。-dオプションで区切り文字を指定する。-fオプションそれに続く数字で取り出す場所を指定します。",
	},
	"head": {
		"prefix": "head",
		"body": [
			"head -n $1",
		],
		"description": "ファイルの先頭を読み出すコマンドで、-nオプションを利用することで指定した行数だけ取り出すことができる。",
	},
	"paste": {
		"prefix": "paste",
		"body": [
			"paste -d, $1",
		],
		"description": "2つのテキストファイルを横方向に連結する。デフォルトでは、タブ区切り。csvファイルとするためには、-dオプションを使い、-d,とする",
	},
	"md5": {
		"prefix": "md5",
		"body": [
			"md5",
		],
		"description": "ハッシュ関数の1つ。与えられた入力に対して128ビットのハッシュ値を出力する。",
	},
	"sort | uniq -c | sort -nr": {
		"prefix": "sort | uniq -c | sort -nr",
		"body": [
			"sort | uniq -c | sort -nr",
		],
		"description": "1.ソートする。2.同一行の出現回数をカウントする。3.数値ソートと逆順ソートをかける。",
	},
	"iconv": {
		"prefix": "iconv",
		"body": [
			"iconv -c -f $1 -t $2 $3",
		],
		"description": "iconv -f <入力文字コード> -t <出力文字コード> <ファイル名>",
	},
	"USR1": {
		"prefix": "USR1",
		"body": [
			"USR1",
		],
		"description": "アプリケーションごとに独自に動作を定めることのできるシグナルです。Apache httpdでは、USR1シグナルを送るとgracefulモードで「穏やかな再起動」LinuxのddコマンドにUSR1シグナルを送ると、コマンドを続行されたまま「現在までに処理したブロック数」を途中表示させる。",
	},
	"trap": {
		"prefix": "trap",
		"body": [
			"trap '$1' $2",
		],
		"description": "シグナルを受け取った際の動作をtrapコマンドで制御する。\ntrap '行いたい処理' シグナル\n trap 'date; exit' INT Ctrl + c が押されると現在時刻を表示してからexitコマンドでシェルスクリプトを終了します。",
	},
	"HUP": {
		"prefix": "HUP",
		"body": [
			"HUP",
		],
		"description": "HUP（ハングアップ）シグナル\nプロセス終了させずに出力先のファイルを切り替えできる。サーバに常駐するデーモンプログラムなどでよく使われる手法",
	},
	".（ドットコマンド）": {
		"prefix": ".（ドットコマンド）",
		"body": [
			".",
		],
		"description": ".（ドットコマンド）で外部ファイルを読み込んだ場合は、あたかもソースファイルがそこにそのまま挿入されたかのようにファイル内のコマンドが実行される",
	},
	"EXIT": {
		"prefix": "EXIT",
		"body": [
			"EXIT",
		],
		"description": "EXITシグナルとは、bashで利用できる疑似シグナルで、正常終了した場合や強制終了時に発生する",
	},
	"ERR": {
		"prefix": "ERR",
		"body": [
			"ERR",
		],
		"description": "bashの疑似シグナル。コマンドの終了ステータスが非ゼロだった。",
	},
	"DEBUG": {
		"prefix": "DEBUG",
		"body": [
			"DEBUG",
		],
		"description": "bashの疑似シグナル。コマンドが実行された",
	},
	"RUTURN": {
		"prefix": "RUTURN",
		"body": [
			"RUTURN",
		],
		"description": "bashの疑似シグナル。ドットコマンドまたはsourceコマンドで外部スクリプトを読み込んだ",
	},
	"scp": {
		"prefix": "scp",
		"body": [
			"scp",
		],
		"description": "ファイル転送コマンド\n -C　ファイル圧縮\n scp <ファイル名> <ユーザー名>@<サーバ名>:<転送先パス>",
	},
	"time": {
		"prefix": "time",
		"body": [
			"time -p",
		],
		"description": "指定したコマンドの実行時間とCPU利用時間を計算するコマンド。-p　秒数のみ表示。\nreal コマンドの起動から終了\n user　ユーザCPU時間\n sys システムCPU",
	},
}